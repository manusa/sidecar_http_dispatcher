#!/usr/bin/env bash

command -v minikube || exit 1
command -v jq || exit 1

MODE=${MODE:-local}

cd $(dirname $PWD/$0)/..
pgrep -lf minikube || minikube start --cpus=4 --memory=8g

# prepare metrics
if [ "${MODE}" == "local" ]; then
    minikube addons enable metrics-server
    minikube addons enable helm-tiller
    # just on local
    helm repo add stable https://kubernetes-charts.storage.googleapis.com/
    helm install stable/influxdb --name-template influxdb
    helm install stable/grafana --name-template grafana
    # wait for metrics destination
    #kubectl wait --for=condition=available --timeout=300s deployment/grafana
fi

# store image in minikube
eval $(minikube docker-env) # use local docker images

# build fresh image
USERNAME=n0npax
VERSION=latest
docker build . --tag ${USERNAME}/sidecar_http_dispatcher:${VERSION}

# deploy
kubectl apply -k example/${MODE}

# wait for main system
kubectl wait --for=condition=available --timeout=300s deployment/acme-enricher
kubectl wait --for=condition=available --timeout=300s deployment/destination-app

ENDPOINT=$(minikube service acme-enricher --url=true)


# failsafe wait
sleep 15
kubectl get po

# run basic e2e
curl -m 5 -v ${ENDPOINT} -H 'environment: qa' --show-error --fail

if [ "${MODE}" == "local" ]; then
    # run full k6
    kubectl apply -k example/k6test

    # access to grafana
    echo
    echo
    echo -n "grafana passowrd: "
    kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
    echo -n "grafana username: "
    kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-user}" | base64 --decode ; echo
    echo "influxdb: http://influxdb.default.svc.cluster.local:8086"
    echo "influxdb database: k6"
    echo "grafana: import dashboard - 2587"
    kubectl expose svc grafana --type=NodePort --name grafana-nodeport --target-port=3000
    minikube service grafana-nodeport
    kubectl apply -k k6test
fi